---
import { type CollectionEntry, render } from "astro:content";
import LinkPreview from "./LinkPreview.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import type { HTMLTag, Polymorphic } from "astro/types";
import { Icon } from "astro-icon/components";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	note: CollectionEntry<"note">;
	isPreview?: boolean | undefined;
};

const { as: Tag = "div", note, isPreview = false } = Astro.props;
const { Content } = await render(note);
const { pinned } = note.data;

const linkMatch = note.body.match(/https?:\/\/[^\s)]+/);
let previewData: {
	url: string;
	title?: string;
	description?: string;
	image?: string;
} | null = null;
if (linkMatch) {
	const url = linkMatch[0];
	try {
		const res = await fetch(url);
		const html = await res.text();
		const meta = (name: string) =>
			html.match(
				new RegExp(`<meta[^>]*(?:property|name)=["']${name}["'][^>]*content=["']([^"']+)["']`, "i"),
			)?.[1];

		const rawImage = meta("og:image") || meta("twitter:image");
		let image: string | undefined;
		if (rawImage) {
			try {
				image = new URL(rawImage, url).href;
			} catch {
				image = rawImage;
			}
		}
		previewData = {
			url,
			title: meta("og:title") || meta("twitter:title") || html.match(/<title>(.*?)<\/title>/i)?.[1],
			description: meta("og:description") || meta("twitter:description"),
			image,
		};
	} catch {
		previewData = null;
	}
}
---

<article
	class:list={[
		isPreview && "inline-grid w-full rounded-md px-4 py-3",
		isPreview &&
			(pinned
				? "border dark:border-[#f9e2af] dark:bg-[#313244]"
				: "bg-[#e6e9ef] dark:bg-[#313244]"),
	]}
	data-pagefind-body={isPreview ? false : true}
	data-is-preview={isPreview}
	data-is-pinned={pinned}
	x-data="{
		expanded: false,
		showMore: false,
		init() {
			const content = this.$refs.noteBody;
			// Let the browser paint first with clamping in place
			requestAnimationFrame(() => {
				const isPreview = this.$el.dataset.isPreview === 'true';
				const isPinned = this.$el.dataset.isPinned === 'true';
        this.expanded = isPinned || !isPreview;
				if (isPreview && !isPinned && content.scrollHeight > content.clientHeight) {
					this.showMore = true;
				}
			});
		}
	}"
>
	<div class="mb-2 flex items-center justify-between">
		<FormattedDate
			class="note-date"
			dateTimeOptions={{
				hour: "2-digit",
				minute: "2-digit",
				year: "2-digit",
				month: "short",
				day: "2-digit",
				timeZone: "UTC",
			}}
			date={note.data.publishDate}
		/>
		<span class="flex items-center gap-2">
			{pinned && <span class="text-sm font-medium">ðŸ“Œ</span>}
			{
				isPreview ? (
					<a
						aria-label="Permalink"
						class="text-muted hover:text-link transition-colors hover:underline"
						href={`/notes/${note.id}/`}
					>
						<Icon aria-hidden="true" class="h-5 w-5" focusable="false" name="mdi:link-variant" />
					</a>
				) : null
			}
		</span>
	</div>

	<div
		x-ref="noteBody"
		class="prose prose-sm prose-cactus mt-2 max-w-none [&>p:last-of-type]:mb-0"
		:class="{ 'line-clamp-6': !expanded }"
	>
		<Content />
		{previewData && <LinkPreview {...previewData} />}
	</div>

	<button
		x-show="showMore && !expanded"
		x-on:click="expanded = true"
		class="cactus-link mt-2 cursor-pointer text-left text-sm"
	>
		Read more
	</button>
</article>
<script>
	document.addEventListener("DOMContentLoaded", () => {
		const times = document.querySelectorAll<HTMLTimeElement>("time.note-date");

		times.forEach((timeEl) => {
			if (timeEl.dateTime) {
				const date = new Date(timeEl.dateTime);
				timeEl.textContent = date.toLocaleString(undefined, {
					day: "2-digit",
					hour: "2-digit",
					minute: "2-digit",
					month: "short",
					year: "2-digit",
				});
			}
		});
	});
</script>
